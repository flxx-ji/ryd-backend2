// üìå routes/adminReservationRoutes.js
const express = require('express');
const router = express.Router();
const Reservation = require('../models/reservation');
const authMiddleware = require('../middleware/authMiddleware'); // üîí Ajout du middleware de s√©curit√©
const Moto = require('../models/moto');
const Client = require('../models/client');


// Toutes les routes ci-dessous sont prot√©g√©es
router.use(authMiddleware);

// ‚úÖ GET - R√©cup√©rer toutes les r√©servations (avec d√©tails des motos et clients)
router.get('/', async (req, res) => {
    try {
        const reservations = await Reservation.find()
            .populate('motoId', 'nom marque modele couleur')
            .populate('clientId', 'nom prenom email telephone');
        res.status(200).json(reservations);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des r√©servations", error });
    }
});

// ‚úÖ GET by ID - R√©cup√©rer une r√©servation pr√©cise
router.get('/:id', async (req, res) => {
    try {
        const reservation = await Reservation.findById(req.params.id)
            .populate('motoId', 'nom marque modele couleur')
            .populate('clientId', 'nom prenom email telephone');
        if (!reservation) return res.status(404).json({ message: "R√©servation introuvable" });
        res.status(200).json(reservation);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration de la r√©servation", error });
    }
});

// ‚úÖ POST - Cr√©er une nouvelle r√©servation
router.post('/', async (req, res) => {
    try {
        const { clientId, motoId, nomMoto, dateDebut, dateFin, statut, prixTotal } = req.body;

        // V√©rification des champs obligatoires
        if (!clientId || !motoId || !nomMoto || !dateDebut || !dateFin || !prixTotal) {
            return res.status(400).json({ message: "Tous les champs sont requis." });
        }

        const nouvelleReservation = new Reservation({
            clientId,
            motoId,
            nomMoto,
            dateDebut,
            dateFin,
            statut,
            prixTotal
        });

        await nouvelleReservation.save();
        res.status(201).json(nouvelleReservation);

    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de la r√©servation :", error);
        res.status(500).json({ message: "Erreur lors de la cr√©ation de la r√©servation", error });
    }
});


// ‚úÖ PUT - Modifier une r√©servation
router.put('/:id', async (req, res) => {
    try {
        const { dateDebut, dateFin, statut } = req.body;
        const reservation = await Reservation.findByIdAndUpdate(
            req.params.id,
            { dateDebut, dateFin, statut },
            { new: true, runValidators: true }
        );
        if (!reservation) return res.status(404).json({ message: "R√©servation introuvable" });
        res.status(200).json(reservation);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la modification de la r√©servation", error });
    }
});

// ‚úÖ DELETE - Supprimer une r√©servation
router.delete('/:id', async (req, res) => {
    try {
        const reservation = await Reservation.findByIdAndDelete(req.params.id);
        if (!reservation) return res.status(404).json({ message: "R√©servation introuvable" });
        res.status(200).json({ message: "R√©servation supprim√©e avec succ√®s" });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la suppression de la r√©servation", error });
    }
});

module.exports = router;
